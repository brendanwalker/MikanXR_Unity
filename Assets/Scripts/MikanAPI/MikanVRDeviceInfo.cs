//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Mikan {

public class MikanVRDeviceInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MikanVRDeviceInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MikanVRDeviceInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MikanVRDeviceInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MikanVRDeviceInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MikanClientPINVOKE.delete_MikanVRDeviceInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MikanVRDeviceApi vr_device_api {
    set {
      MikanClientPINVOKE.MikanVRDeviceInfo_vr_device_api_set(swigCPtr, (int)value);
    } 
    get {
      MikanVRDeviceApi ret = (MikanVRDeviceApi)MikanClientPINVOKE.MikanVRDeviceInfo_vr_device_api_get(swigCPtr);
      return ret;
    } 
  }

  public MikanVRDeviceType vr_device_type {
    set {
      MikanClientPINVOKE.MikanVRDeviceInfo_vr_device_type_set(swigCPtr, (int)value);
    } 
    get {
      MikanVRDeviceType ret = (MikanVRDeviceType)MikanClientPINVOKE.MikanVRDeviceInfo_vr_device_type_get(swigCPtr);
      return ret;
    } 
  }

  public string device_path {
    set {
      MikanClientPINVOKE.MikanVRDeviceInfo_device_path_set(swigCPtr, value);
    } 
    get {
      string ret = MikanClientPINVOKE.MikanVRDeviceInfo_device_path_get(swigCPtr);
      return ret;
    } 
  }

  public MikanVRDeviceInfo() : this(MikanClientPINVOKE.new_MikanVRDeviceInfo(), true) {
  }

}

}
