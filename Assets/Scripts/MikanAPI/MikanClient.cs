//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Mikan {

public class MikanClient {

  [global::System.Runtime.InteropServices.UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
  public delegate void MikanLogCallback(
    int log_level,
    [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPStr)]
    string log_message);   

  public static MikanResult Mikan_Initialize(MikanLogLevel min_log_level, MikanClient.MikanLogCallback log_callback) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_Initialize((int)min_log_level, log_callback);
    return ret;
  }

  public static bool Mikan_GetIsInitialized() {
    bool ret = MikanClientPINVOKE.Mikan_GetIsInitialized();
    return ret;
  }

  public static string Mikan_GetVersionString() {
    string ret = MikanClientPINVOKE.Mikan_GetVersionString();
    return ret;
  }

  public static MikanResult Mikan_Connect(MikanClientInfo client_info) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_Connect(MikanClientInfo.getCPtr(client_info));
    return ret;
  }

  public static bool Mikan_GetIsConnected() {
    bool ret = MikanClientPINVOKE.Mikan_GetIsConnected();
    return ret;
  }

  public static MikanResult Mikan_PollNextEvent(MikanEvent out_event) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_PollNextEvent(MikanEvent.getCPtr(out_event));
    return ret;
  }

  public static MikanResult Mikan_GetVideoSourceIntrinsics(MikanVideoSourceIntrinsics out_intrinsics) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetVideoSourceIntrinsics(MikanVideoSourceIntrinsics.getCPtr(out_intrinsics));
    return ret;
  }

  public static MikanResult Mikan_GetVideoSourceMode(MikanVideoSourceMode out_info) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetVideoSourceMode(MikanVideoSourceMode.getCPtr(out_info));
    return ret;
  }

  public static MikanResult Mikan_GetVideoSourceAttachment(MikanVideoSourceAttachmentInfo out_info) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetVideoSourceAttachment(MikanVideoSourceAttachmentInfo.getCPtr(out_info));
    return ret;
  }

  public static MikanResult Mikan_GetVRDeviceList(MikanVRDeviceList out_vr_device_list) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetVRDeviceList(MikanVRDeviceList.getCPtr(out_vr_device_list));
    return ret;
  }

  public static MikanResult Mikan_GetVRDeviceInfo(int device_id, MikanVRDeviceInfo out_vr_device_info) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetVRDeviceInfo(device_id, MikanVRDeviceInfo.getCPtr(out_vr_device_info));
    return ret;
  }

  public static MikanResult Mikan_SubscribeToVRDevicePoseUpdates(int device_id) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_SubscribeToVRDevicePoseUpdates(device_id);
    return ret;
  }

  public static MikanResult Mikan_UnsubscribeFromVRDevicePoseUpdates(int device_id) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_UnsubscribeFromVRDevicePoseUpdates(device_id);
    return ret;
  }

  public static MikanResult Mikan_SetGraphicsDeviceInterface(MikanClientGraphicsApi api, System.IntPtr graphicsDeviceInterface) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_SetGraphicsDeviceInterface((int)api, graphicsDeviceInterface);
    return ret;
  }

  public static MikanResult Mikan_AllocateRenderTargetBuffers(MikanRenderTargetDescriptor descriptor, MikanRenderTargetMemory out_memory_ptr) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_AllocateRenderTargetBuffers(MikanRenderTargetDescriptor.getCPtr(descriptor), MikanRenderTargetMemory.getCPtr(out_memory_ptr));
    return ret;
  }

  public static MikanResult Mikan_PublishRenderTargetTexture(System.IntPtr ApiTexturePtr, ulong frame_index) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_PublishRenderTargetTexture(ApiTexturePtr, frame_index);
    return ret;
  }

  public static MikanResult Mikan_PublishRenderTargetBuffers(ulong frame_index) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_PublishRenderTargetBuffers(frame_index);
    return ret;
  }

  public static MikanResult Mikan_FreeRenderTargetBuffers() {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_FreeRenderTargetBuffers();
    return ret;
  }

  public static MikanResult Mikan_SendScriptMessage(MikanScriptMessageInfo message) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_SendScriptMessage(MikanScriptMessageInfo.getCPtr(message));
    return ret;
  }

  public static MikanResult Mikan_GetStencilList(MikanStencilList out_stencil_list) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetStencilList(MikanStencilList.getCPtr(out_stencil_list));
    return ret;
  }

  public static MikanResult Mikan_GetQuadStencil(int stencil_id, MikanStencilQuad out_stencil) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetQuadStencil(stencil_id, MikanStencilQuad.getCPtr(out_stencil));
    return ret;
  }

  public static MikanResult Mikan_GetBoxStencil(int stencil_id, MikanStencilBox out_stencil) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetBoxStencil(stencil_id, MikanStencilBox.getCPtr(out_stencil));
    return ret;
  }

  public static MikanResult Mikan_GetModelStencil(int stencil_id, MikanStencilModel out_stencil) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetModelStencil(stencil_id, MikanStencilModel.getCPtr(out_stencil));
    return ret;
  }

  public static MikanResult Mikan_GetSpatialAnchorList(MikanSpatialAnchorList out_anchor_list) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetSpatialAnchorList(MikanSpatialAnchorList.getCPtr(out_anchor_list));
    return ret;
  }

  public static MikanResult Mikan_GetSpatialAnchorInfo(int anchor_id, MikanSpatialAnchorInfo out_anchor_info) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_GetSpatialAnchorInfo(anchor_id, MikanSpatialAnchorInfo.getCPtr(out_anchor_info));
    return ret;
  }

  public static MikanResult Mikan_FindSpatialAnchorInfoByName(string anchor_name, MikanSpatialAnchorInfo out_anchor_info) {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_FindSpatialAnchorInfoByName(anchor_name, MikanSpatialAnchorInfo.getCPtr(out_anchor_info));
    return ret;
  }

  public static MikanResult Mikan_Disconnect() {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_Disconnect();
    return ret;
  }

  public static MikanResult Mikan_Shutdown() {
    MikanResult ret = (MikanResult)MikanClientPINVOKE.Mikan_Shutdown();
    return ret;
  }

  public static readonly string MIKAN_CLIENT_VERSION_STRING = MikanClientPINVOKE.MIKAN_CLIENT_VERSION_STRING_get();
  public static readonly double MIKAN_METERS_TO_CENTIMETERS = MikanClientPINVOKE.MIKAN_METERS_TO_CENTIMETERS_get();
  public static readonly double MIKAN_CENTIMETERS_TO_METERS = MikanClientPINVOKE.MIKAN_CENTIMETERS_TO_METERS_get();
  public static readonly int INVALID_MIKAN_ID = MikanClientPINVOKE.INVALID_MIKAN_ID_get();
  public static readonly int MAX_MIKAN_VR_DEVICES = MikanClientPINVOKE.MAX_MIKAN_VR_DEVICES_get();
  public static readonly int MAX_MIKAN_STENCILS = MikanClientPINVOKE.MAX_MIKAN_STENCILS_get();
  public static readonly int MAX_MIKAN_STENCIL_NAME_LEN = MikanClientPINVOKE.MAX_MIKAN_STENCIL_NAME_LEN_get();
  public static readonly int MAX_MIKAN_SPATIAL_ANCHORS = MikanClientPINVOKE.MAX_MIKAN_SPATIAL_ANCHORS_get();
  public static readonly int MAX_MIKAN_ANCHOR_NAME_LEN = MikanClientPINVOKE.MAX_MIKAN_ANCHOR_NAME_LEN_get();
  public static readonly int MAX_MIKAN_SCRIPT_MESSAGE_LEN = MikanClientPINVOKE.MAX_MIKAN_SCRIPT_MESSAGE_LEN_get();
  public static readonly string ORIGIN_SPATIAL_ANCHOR_NAME = MikanClientPINVOKE.ORIGIN_SPATIAL_ANCHOR_NAME_get();
}

}
