//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Mikan {

public class MikanRenderTargetMemory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MikanRenderTargetMemory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MikanRenderTargetMemory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MikanRenderTargetMemory obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MikanRenderTargetMemory() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MikanClientPINVOKE.delete_MikanRenderTargetMemory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public System.IntPtr color_buffer {
    set {
      MikanClientPINVOKE.MikanRenderTargetMemory_color_buffer_set(swigCPtr, value);
    }  
    get {
        System.IntPtr cPtr = MikanClientPINVOKE.MikanRenderTargetMemory_color_buffer_get(swigCPtr); 
        return cPtr; 
   } 

  }

  public System.IntPtr depth_buffer {
    set {
      MikanClientPINVOKE.MikanRenderTargetMemory_depth_buffer_set(swigCPtr, value);
    }  
    get {
        System.IntPtr cPtr = MikanClientPINVOKE.MikanRenderTargetMemory_depth_buffer_get(swigCPtr); 
        return cPtr; 
   } 

  }

  public uint color_buffer_size {
    set {
      MikanClientPINVOKE.MikanRenderTargetMemory_color_buffer_size_set(swigCPtr, value);
    } 
    get {
      uint ret = MikanClientPINVOKE.MikanRenderTargetMemory_color_buffer_size_get(swigCPtr);
      return ret;
    } 
  }

  public uint depth_buffer_size {
    set {
      MikanClientPINVOKE.MikanRenderTargetMemory_depth_buffer_size_set(swigCPtr, value);
    } 
    get {
      uint ret = MikanClientPINVOKE.MikanRenderTargetMemory_depth_buffer_size_get(swigCPtr);
      return ret;
    } 
  }

  public uint width {
    set {
      MikanClientPINVOKE.MikanRenderTargetMemory_width_set(swigCPtr, value);
    } 
    get {
      uint ret = MikanClientPINVOKE.MikanRenderTargetMemory_width_get(swigCPtr);
      return ret;
    } 
  }

  public uint height {
    set {
      MikanClientPINVOKE.MikanRenderTargetMemory_height_set(swigCPtr, value);
    } 
    get {
      uint ret = MikanClientPINVOKE.MikanRenderTargetMemory_height_get(swigCPtr);
      return ret;
    } 
  }

  public MikanRenderTargetMemory() : this(MikanClientPINVOKE.new_MikanRenderTargetMemory(), true) {
  }

}

}
